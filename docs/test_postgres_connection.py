#!/usr/bin/env python3
"""
Script de teste para verificar conectividade com PostgreSQL
e estrutura das tabelas necess√°rias para o projeto FAF.
"""

import psycopg2
from psycopg2.extras import RealDictCursor

# Configura√ß√£o do banco PostgreSQL
DB_CONFIG = {
    'host': 'localhost',
    'port': '5432',
    'database': 'projeto_parcerias',
    'user': 'postgres',
    'password': 'Cora√ß√£o01'
}

def test_connection():
    """Testa conex√£o b√°sica com o PostgreSQL."""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        print("‚úÖ Conex√£o com PostgreSQL estabelecida com sucesso!")
        
        cur = conn.cursor(cursor_factory=RealDictCursor)
        
        # Testar vers√£o do PostgreSQL
        cur.execute("SELECT version();")
        version = cur.fetchone()
        print(f"üêò Vers√£o do PostgreSQL: {version['version']}")
        
        cur.close()
        conn.close()
        return True
        
    except psycopg2.Error as e:
        print(f"‚ùå Erro na conex√£o com PostgreSQL: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def test_tables():
    """Verifica se as tabelas necess√°rias existem no banco."""
    required_tables = ['usuarios', 'Parcerias', 'Parcerias_Despesas', 'Instrucoes']
    
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor(cursor_factory=RealDictCursor)
        
        print("\nüìã Verificando tabelas necess√°rias:")
        
        for table in required_tables:
            cur.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = %s
                );
            """, (table.lower(),))
            
            exists = cur.fetchone()['exists']
            status = "‚úÖ" if exists else "‚ùå"
            print(f"{status} Tabela '{table}': {'Existe' if exists else 'N√£o encontrada'}")
            
            if exists:
                # Contar registros na tabela
                cur.execute(f"SELECT COUNT(*) as count FROM {table};")
                count = cur.fetchone()['count']
                print(f"   üìä Registros: {count}")
        
        cur.close()
        conn.close()
        
    except psycopg2.Error as e:
        print(f"‚ùå Erro ao verificar tabelas: {e}")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")

def test_sample_queries():
    """Testa algumas queries de exemplo."""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor(cursor_factory=RealDictCursor)
        
        print("\nüîç Testando queries de exemplo:")
        
        # Testar query dos usu√°rios
        cur.execute("SELECT COUNT(*) as count FROM usuarios;")
        user_count = cur.fetchone()['count']
        print(f"‚úÖ Usu√°rios cadastrados: {user_count}")
        
        # Testar query das parcerias (principal)
        cur.execute("""
            SELECT COUNT(*) as count 
            FROM Parcerias 
            WHERE tipo_termo NOT IN ('Conv√™nio de Coopera√ß√£o', 'Conv√™nio', 'Conv√™nio - Passivo', 'Acordo de Coopera√ß√£o')
        """)
        parcerias_count = cur.fetchone()['count']
        print(f"‚úÖ Parcerias v√°lidas para or√ßamento: {parcerias_count}")
        
        # Testar query das despesas
        cur.execute("SELECT COUNT(*) as count FROM Parcerias_Despesas;")
        despesas_count = cur.fetchone()['count']
        print(f"‚úÖ Despesas cadastradas: {despesas_count}")
        
        cur.close()
        conn.close()
        
    except psycopg2.Error as e:
        print(f"‚ùå Erro ao executar queries de teste: {e}")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")

def main():
    """Executa todos os testes."""
    print("üöÄ Iniciando testes de conectividade PostgreSQL...\n")
    
    if test_connection():
        test_tables()
        test_sample_queries()
        print("\nüéâ Testes conclu√≠dos!")
    else:
        print("\nüí• Falha na conex√£o - verifique as configura√ß√µes do PostgreSQL")

if __name__ == "__main__":
    main()